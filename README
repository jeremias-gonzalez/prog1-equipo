                                                            📌 Guía Práctica para Subir Cambios a GitHub 🚀
                                                📍 Posición en la Terminal
Antes de comenzar, asegúrate de estar ubicado en la carpeta de tu proyecto. Para verificar tu ubicación, puedes usar el comando pwd.

Ejemplo de ubicación en la terminal:

jere@jere:~/Escritorio/prog1-equipo$

                                                    🚀 Pasos para Subir Cambios a GitHub
🔹 1. Agregar archivos al área de preparación
Para incluir todos los cambios en el área de preparación, usa el comando:

git add .

Si deseas agregar un archivo específico, reemplaza . por el nombre del archivo.

🔹 2. Confirmar los cambios con un mensaje de commit
Registra los cambios en el historial de Git con un mensaje descriptivo:

git commit -m "Descripción breve de los cambios - [Tu Nombre]"

🔹 3. Enviar los cambios al repositorio remoto
Para subir los cambios a GitHub en la rama principal (main):

git push origin main

Si estás trabajando en otra rama, reemplaza main por el nombre de la rama correspondiente.

                                                            📌 Notas Importantes
🔹 Verifica en qué rama estás
Antes de subir los cambios, revisa en qué rama te encuentras con el comando:

git branch

Si necesitas cambiar a la rama main, usa:

git checkout main

🔹 Autenticación en GitHub
Si es la primera vez que subes cambios o has cambiado tus credenciales, GitHub puede solicitar autenticación. Para evitar problemas, puedes configurar una clave SSH o utilizar un token de acceso.

🔹 Revisión antes del push
Antes de subir los cambios, revisa qué archivos han sido modificados con el comando:

git status

                                                            📥 Descargar Cambios del Repositorio
Si hay cambios en GitHub que aún no tienes localmente, sincroniza tu repositorio con:

git pull origin main

Esto actualizará tu repositorio local con los últimos cambios remotos.

💡 ¡Con estos comandos mantendrás tu proyecto siempre sincronizado con GitHub de manera eficiente! 🚀

